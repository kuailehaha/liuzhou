"""
Data containers for vectorized self-play outputs.
"""

from __future__ import annotations

from dataclasses import dataclass

import torch


@dataclass
class RolloutTensorBatch:
    """
    Minimal batching wrapper for training tuples generated by vectorized self-play.
    """

    states: torch.Tensor  # (N, C, H, W)
    policies: torch.Tensor  # (N, A)
    values: torch.Tensor  # (N,)
    soft_values: torch.Tensor  # (N,)
    legal_masks: torch.BoolTensor  # (N, A)

    def to(self, device: torch.device) -> "RolloutTensorBatch":
        return RolloutTensorBatch(
            states=self.states.to(device),
            policies=self.policies.to(device),
            values=self.values.to(device),
            soft_values=self.soft_values.to(device),
            legal_masks=self.legal_masks.to(device),
        )
